const { DynamoDBClient, PutItemCommand } = require('@aws-sdk/client-dynamodb');
const { marshall } = require('@aws-sdk/util-dynamodb');
const { SSMClient, GetParameterCommand } = require('@aws-sdk/client-ssm');
const { Octokit } = require('@octokit/rest');

const dynamoClient = new DynamoDBClient({ region: process.env.AWS_REGION });
const ssmClient = new SSMClient({ region: process.env.AWS_REGION });

exports.handler = async (event) => {
  const { mediaId, fileName, s3Key } = JSON.parse(event.body || '{}');
  
  try {
    // 1. Generate low trust score analysis
    const analysisResult = {
      mediaId,
      fileName,
      s3Key,
      trustScore: { composite: 25, riskLevel: 'HIGH' },
      deepfakeAnalysis: { probability: 0.92, techniques: ['face_swap'] },
      requiresHumanReview: true,
      analyzedAt: new Date().toISOString()
    };
    
    // 2. Auto-generate simulated human review
    const reviewDecision = {
      reviewId: `review-${Date.now()}`,
      mediaId,
      decision: 'confirm',
      confidence: 0.95,
      reasoning: 'Demo: Clear evidence of manipulation detected',
      reviewedAt: new Date().toISOString()
    };
    
    // 3. Create threat report
    const reportId = `TR-${Date.now()}-DEMO`;
    const threatReport = {
      reportId,
      title: `DEMO: Confirmed Deepfake Detection - ${fileName}`,
      severity: 'high',
      createdAt: new Date().toISOString(),
      indicators: ['face_swap_technique', 'audio_visual_desync'],
      publicReportGenerated: true
    };
    
    // 4. Store in DynamoDB
    const tableName = process.env.AUDIT_TABLE_NAME;
    await dynamoClient.send(new PutItemCommand({
      TableName: tableName,
      Item: marshall({
        mediaId,
        timestamp: new Date().toISOString(),
        recordType: 'demo_analysis',
        ...analysisResult,
        reviewDecision,
        threatReport
      })
    }));
    
    // 5. Publish to GitHub
    const githubResult = await publishToGitHub(threatReport, fileName);
    
    return {
      statusCode: 200,
      headers: {
        'Content-Type': 'application/json',
        'Access-Control-Allow-Origin': '*'
      },
      body: JSON.stringify({
        success: true,
        mediaId,
        trustScore: 25,
        reviewDecision: 'CONFIRMED DEEPFAKE',
        threatReport: reportId,
        githubUrl: githubResult.url,
        message: 'Demo HITL workflow completed - check GitHub for threat report'
      })
    };
    
  } catch (error) {
    console.error('Demo HITL error:', error);
    return {
      statusCode: 500,
      headers: { 'Access-Control-Allow-Origin': '*' },
      body: JSON.stringify({ error: 'Demo workflow failed' })
    };
  }
};

async function publishToGitHub(threatReport, fileName) {
  try {
    const tokenParam = await ssmClient.send(new GetParameterCommand({
      Name: '/hlekkr/prod/github/token',
      WithDecryption: true
    }));
    
    const octokit = new Octokit({ auth: tokenParam.Parameter.Value });
    
    const date = new Date().toISOString().split('T')[0];
    const content = `# DEMO Threat Report: ${threatReport.title}

**Report ID:** ${threatReport.reportId}  
**Date:** ${date}  
**Severity:** ${threatReport.severity.toUpperCase()}  
**Source File:** ${fileName}

## Executive Summary

This is a demonstration of the Hlekkr platform's automated threat intelligence generation. The system detected suspicious media through AI analysis, confirmed the threat through simulated human review, and automatically generated this sanitized report for community sharing.

## Indicators Detected

${threatReport.indicators.map(indicator => `- ${indicator}`).join('\n')}

## Mitigation Guidance

- Update detection algorithms with identified patterns
- Monitor for similar manipulation techniques
- Implement additional verification for suspicious content

---

*This is a demonstration report generated by the Hlekkr Media Verification System for hackathon evaluation purposes.*

*Generated on: ${new Date().toISOString()}*
`;

    const result = await octokit.rest.repos.createOrUpdateFileContents({
      owner: 'hlekkr',
      repo: 'hlekkr-framework',
      path: `threat-reports/${date}/${threatReport.reportId}.md`,
      message: `Add demo threat report: ${threatReport.title}`,
      content: Buffer.from(content).toString('base64'),
      branch: 'main'
    });
    
    return {
      url: `https://github.com/hlekkr/hlekkr-framework/blob/main/threat-reports/${date}/${threatReport.reportId}.md`,
      sha: result.data.commit.sha
    };
    
  } catch (error) {
    console.error('GitHub publish error:', error);
    throw error;
  }
}